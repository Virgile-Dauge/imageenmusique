#+title: Image en Musique
#+author: Virgile Daugé
#+EMAIL:virgile.dauge@loria.fr


* Hilbert Curves
#+begin_src ipython :session truc :file  :exports both :tangle convert.py
import numpy as np
import matplotlib.pyplot as plt
#+end_src

#+RESULTS:
: # Out[25]:

#+begin_src ipython :session truc :file :exports both :tangle convert.py
  def hilbert_approx(size=2, start=0, quarter='n'):
      if size == 2:
          mat = np.array([[1, 2],[0, 3]]) + start
      else:
          mat = np.zeros((size, size))
          half = int(size / 2)
          mat[half:size, 0:half] = hilbert_approx(half, start=start, quarter='so')
          mat[0:half, 0:half] = hilbert_approx(half, start=start + half**2)
          mat[0:half, half:size] = hilbert_approx(half, start=start + 2 * (half**2))
          mat[half:size, half:size] = hilbert_approx(half, start=start + 3 * (half**2), quarter='se')
      if quarter == 'so':
          return np.fliplr(np.rot90(mat, k=1)) + start
      elif quarter == 'se':
          return np.flipud(np.rot90(mat, k=1)) + start
      else:
          return mat + start

#+end_src

#+RESULTS:
: # Out[26]:

#+begin_src ipython :session iem :file  :exports both :results both
ha = hilbert_approx(4)
ha
#+end_src

#+RESULTS:
: # Out[38]:
: #+BEGIN_EXAMPLE
:   array([[ 5.,  6.,  9., 10.],
:   [ 4.,  7.,  8., 11.],
:   [ 3.,  2., 13., 12.],
:   [ 0.,  1., 14., 15.]])
: #+END_EXAMPLE

#+begin_src ipython :session iem :file  :exports both
data = np.random.randint(low=0, high=255, size=(4,4))
flat_ha = ha.ravel()
flat_data = data.ravel()
map = np.zeros((4**2, 2))
map[:, 0] = flat_ha
map[:, 1] = flat_data
map
#+end_src

#+RESULTS:
#+begin_example
# Out[80]:
,#+BEGIN_EXAMPLE
  array([[  5., 116.],
  [  6., 129.],
  [  9., 209.],
  [ 10., 125.],
  [  4.,   9.],
  [  7.,  48.],
  [  8., 180.],
  [ 11., 126.],
  [  3.,  64.],
  [  2., 158.],
  [ 13.,  35.],
  [ 12.,  65.],
  [  0., 171.],
  [  1., 157.],
  [ 14.,  10.],
  [ 15., 236.]])
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session iem :file  :exports both
map[np.argsort(map[:, 0])]
#+end_src

#+RESULTS:
#+begin_example
# Out[82]:
,#+BEGIN_EXAMPLE
  array([[  0., 171.],
  [  1., 157.],
  [  2., 158.],
  [  3.,  64.],
  [  4.,   9.],
  [  5., 116.],
  [  6., 129.],
  [  7.,  48.],
  [  8., 180.],
  [  9., 209.],
  [ 10., 125.],
  [ 11., 126.],
  [ 12.,  65.],
  [ 13.,  35.],
  [ 14.,  10.],
  [ 15., 236.]])
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session truc :file  :exports both :tangle convert.py
  from matplotlib.image import imread
  def load_img(path):
      fractal = imread(path)
      image_map = np.zeros((len(fractal)**2, 4), dtype=int)
      image_map[:, 0] = hilbert_approx(len(fractal)).flatten()
      image_map[:, 1] = fractal[:, :, 0].ravel()
      image_map[:, 2] = fractal[:, :, 1].ravel()
      image_map[:, 3] = fractal[:, :, 2].ravel()
      image_map[np.argsort(image_map[:, 0])]
      return image_map
#+end_src

#+RESULTS:
: # Out[35]:

#+begin_src ipython :session iem :file  :exports both
image_map[:, 1] = fractal[:, :, 0].ravel()
image_map[:, 2] = fractal[:, :, 1].ravel()
image_map[:, 3] = fractal[:, :, 2].ravel()
image_map
#+end_src

#+RESULTS:
#+begin_example
# Out[125]:
,#+BEGIN_EXAMPLE
  array([[ 3378745,      176,      176,      176],
  [ 3378746,      170,      170,      170],
  [ 3378753,      173,      173,      173],
  ...,
  [10136209,      117,      117,      117],
  [10136234,      131,      131,      131],
  [10136235,      124,      124,      124]])
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session iem :file  :exports both
image_map[np.argsort(image_map[:, 0])]
#+end_src

#+RESULTS:
#+begin_example
# Out[114]:
,#+BEGIN_EXAMPLE
  array([[       0,      143,      143,      143],
  [       1,      143,      143,      143],
  [       2,      143,      143,      143],
  ...,
  [10136233,       93,       93,       93],
  [10136234,      131,      131,      131],
  [10136235,      124,      124,      124]])
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session iem :file  :exports both
import matplotlib.pyplot as plt
plt.plot(image_map[:,0], image_map[:,1])
plt.show()
#+end_src

#+RESULTS:
: # Out[117]:
: [[file:./obipy-resources/anDGJn.png]]

** test music
#+begin_src ipython :session iem :file  :exports both
pip install music
#+end_src

#+RESULTS:
: # Out[118]:

#+begin_src ipython :session iem :file  :exports both
import music as M
T = M.tables.Basic()
H = M.utils.H


# 1) start a ѕynth
b = M.core.Being()

# 2) set its parameters using sequences to be iterated through
b.d_ = [1/2, 1/4]  # durations in seconds
#b.fv_ = [0, 1,5,15,150,1500,15000]  # vibrato frequency
b.fv_ = [0]  # vibrato frequency
b.nu_ = [0]  # vibrato depth in semitones (maximum deviation of pitch)
b.f_ = [220, 330]  # frequencies for the notes

# 3) render the wavfile
b.render(30, 'aMusicalSound.wav')  # render 30 notes iterating though the lists above
#+end_src

#+RESULTS:
: # Out[1]:

#+begin_src bash :results value verbatim :exports both
wget http://goo.gl/qpOjt
#+end_src

#+RESULTS:
* Music gen
** Test pyknon
#+begin_src ipython :session iem :file  :exports both
pip install pyknon
#+end_src

#+RESULTS:
: # Out[130]:

#+begin_src ipython :session truc :file  :exports both
from pyknon.genmidi import Midi
from pyknon.music import NoteSeq

notes1 = NoteSeq("D4 F#8 A Bb4")
midi = Midi(1, tempo=90)
midi.seq_notes(notes1, track=0)
midi.write("demo.midi")
#+end_src

#+RESULTS:
: # Out[2]:

** Mapping des notes

*** pixel to freq
#+begin_src ipython :session truc :file  :exports both
  def pixel_to_freq(pixel, min_freq=65.406, max_freq=15804.):
    return pixel * (max_freq-min_freq) / 255 + min_freq
#+end_src


#+RESULTS:
: # Out[3]:

#+begin_src ipython :session truc :file  :exports both :results output
  print(pixel_to_freq(0))
  print(pixel_to_freq(255))
  print(pixel_to_freq(127))
#+end_src

#+RESULTS:
: # Out[4]:
*** pixel to tab
#+begin_src bash :results value verbatim :exports both
echo "C0	16.3515978312874
C#0	17.3239144360545
D0	18.3540479948379
D#0	19.44543648263
E0	20.6017223070543
F0	21.8267644645627
F#0	23.1246514194771
G0	24.4997147488593
G#0	25.9565435987465
A0	27.4999999999999
A#0	29.1352350948806
B0	30.8677063285077
C1	32.7031956625748
C#1	34.6478288721089
D1	36.7080959896759
D#1	38.89087296526
E1	41.2034446141087
F1	43.6535289291254
F#1	46.2493028389542
G1	48.9994294977186
G#1	51.9130871974931
A1	54.9999999999999
A#1	58.2704701897611
B1	61.7354126570154
C2	65.4063913251495
C#2	69.2956577442179
D2	73.4161919793518
D#2	77.7817459305201
E2	82.4068892282174
F2	87.3070578582508
F#2	92.4986056779085
G2	97.9988589954372
G#2	103.826174394986
A2	110
A#2	116.540940379522
B2	123.470825314031
C3	130.812782650299
C#3	138.591315488436
D3	146.832383958704
D#3	155.56349186104
E3	164.813778456435
F3	174.614115716502
F#3	184.997211355817
G3	195.997717990874
G#3	207.652348789972
A3	220
A#3	233.081880759045
B3	246.941650628062
C4	261.625565300598
C#4	277.182630976872
D4	293.664767917407
D#4	311.126983722081
E4	329.62755691287
F4	349.228231433004
F#4	369.994422711634
G4	391.995435981749
G#4	415.304697579945
A4	440
A#4	466.16376151809
B4	493.883301256124
C5	523.251130601197
C#5	554.365261953744
D5	587.329535834815
D#5	622.253967444162
E5	659.25511382574
F5	698.456462866008
F#5	739.988845423269
G5	783.990871963499
G#5	830.609395159891
A5	880
A#5	932.32752303618
B5	987.766602512249
C6	1046.50226120239
C#6	1108.73052390749
D6	1174.65907166963
D#6	1244.50793488832
E6	1318.51022765148
F6	1396.91292573202
F#6	1479.97769084654
G6	1567.981743927
G#6	1661.21879031978
A6	1760
A#6	1864.65504607236
B6	1975.5332050245
C7	2093.00452240479
C#7	2217.46104781498
D7	2349.31814333926
D#7	2489.01586977665
E7	2637.02045530296
F7	2793.82585146403
F#7	2959.95538169308
G7	3135.963487854
G#7	3322.43758063956
A7	3520
A#7	3729.31009214472
B7	3951.066410049
C8	4186.00904480958
C#8	4434.92209562996
D8	4698.63628667853
D#8	4978.0317395533
E8	5274.04091060593
F8	5587.65170292807
F#8	5919.91076338616
G8	6271.926975708
G#8	6644.87516127913
A8	7040.00000000001
A#8	7458.62018428945
B8	7902.132820098" > notes.csv
#+end_src

#+RESULTS:

#+begin_src ipython :session truc :file  :exports both :tangle convert.py
  import pandas as pd
  def load_notes():
      return pd.read_csv('notes.csv', delimiter='\t', names=['note', 'freq'])
#+end_src

#+RESULTS:
: # Out[30]:

#+begin_src ipython :session truc :file  :exports both :tangle convert.py
  def get_note(df, pixel, taux_min=0, taux_max=100):
    taille = len(df)
    val_min = taux_min * taille / 100
    val_max = taux_max * taille / 100

    return df['note'][int(pixel * (val_max-val_min - 1) / 255 + val_min)]
#+end_src

#+RESULTS:
: # Out[10]:

#+begin_src ipython :session truc :file  :exports both :tangle convert.py
  def get_freq(df, pixel, taux_min=0, taux_max=100):
      taille = len(df)
      val_min = taux_min * taille / 100
      val_max = taux_max * taille / 100
      return df['freq'][int(pixel * (val_max-val_min - 1) / 255 + val_min)]
#+end_src

#+RESULTS:
: # Out[6]:
** Test
#+begin_src ipython :session truc :file  :exports both
  img = load_img('index.jpg')
  notes = load_notes()[30:60]
  seq = []
  for i in range(len(img)):
      seq.append(get_note(notes, img[i, 1]))
  print(len(seq), seq[:30])
#+end_src

#+RESULTS:
: # Out[55]:

#+begin_src ipython :session truc :file  :exports both
  from pyknon.genmidi import Midi
  from pyknon.music import NoteSeq
  seq_str = ''
  for i in range(len(seq[:30])):
    seq_str = seq_str + ' '
  notes1 = NoteSeq(seq_str)
  midi = Midi(1, tempo=90)
  midi.seq_notes(notes1, track=0)
  midi.write("essai.mid")
#+end_src

#+RESULTS:
: # Out[60]:

#+begin_src ipython :session truc :file  :exports both
import music as M
T = M.tables.Basic()
H = M.utils.H


# 1) start a ѕynth
b = M.core.Being()

freq_seq = [get_freq(notes[40:50], img[i, 1]) for i in range(len(img))]
# 2) set its parameters using sequences to be iterated through

#b.fv_ = [0, 1,5,15,150,1500,15000]  # vibrato frequency
b.fv_ = [0]  # vibrato frequency
b.nu_ = [0]  # vibrato depth in semitones (maximum deviation of pitch)
b.f_ = freq_seq[:50]
b.d_ = [1 / 2]* len(b.f_)

# 3) render the wavfile
b.render(30, 'aMusicalSound.wav')  #
#+end_src
* Main
#+begin_src ipython :session truc :file  :exports both :tangle convert.py
  def main():
      img = load_img('foret.jpeg')
      notes = load_notes()
      import music as M
      T = M.tables.Basic()
      H = M.utils.H


      # 1) start a ѕynth
      b = M.core.Being()

      freq_seq = [get_freq(notes, img[i, 1], taux_min=40, taux_max=60) for i in range(len(img))]
      # 2) set its parameters using sequences to be iterated through
      print(freq_seq[7000:9000])
      #b.fv_ = [0, 1,5,15,150,1500,15000]  # vibrato frequency
      b.fv_ = [0]  # vibrato frequency
      b.nu_ = [0]  # vibrato depth in semitones (maximum deviation of pitch)
      b.f_ = freq_seq[7000:9000]
      b.d_ = [1 / 4] * len(b.f_)

      # 3) render the wavfile
      b.render(120, 'aMusicalSound.wav')  #
      # seq = []
      # for i in range(len(img)):
      #     seq.append(get_note(notes, img[i, 1]))
      # gammes = [note[-1] for note in seq]
      # print(gammes)
      # print(len(seq), seq[:300])
  if __name__ == '__main__':
      main()
#+end_src
